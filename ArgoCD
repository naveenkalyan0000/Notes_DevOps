ArgoCD is gitops tool
=======================

it follows git as single source of truth.
we don't have to provide Kubernetes credentials and we dont have to install kubectl plugin or aws cli plugin if it we use EKS cluster.
we install argocd directly in our cluster and we have seperate git remote repo where we store deployment.yml and service.yml or helmchart by these repo it will deploy app automatically.
if there are any changes in that repo then it will automatically deploy the changes and even if we manually if we make changes inside the cluster then it will check the repo and automatically make the changes in deployment.

generally during creation of that repo we will change the settings which is no direct commit allowed in master branch if any body works in feature branch and wants to do commit or merge into master branch they need to do pull request changes will not be merged into master branch unless the architect approves these way access control works here


for minikube:
==============

kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
kubectl port-forward svc/argocd-server -n argocd --address 0.0.0.0 8080:443 > /dev/null 2>&1 &
in browser enter publicip:8080
for kops or eks:
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
 Wait about 2 minutes for the LoadBalancer creation
kubectl get svc -n argocd
Get pasword and decode it.
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
